#!/usr/bin/env ruby

name = nil
version = nil
options = []
gems = []

if $PROGRAM_NAME != __FILE__
  raise LoadError, "File is executable: #{__FILE__}"
end

ARGV.each do |arg|
  if arg =~ /^-{1,2}[A-Za-z0-9]+/
    options << arg
    next
  end

  unless `gem specification --remote '#{arg}' version`.each_line.find { |s| s =~ /^version:\s+(.*)$/ }
    abort "Could not find a valid gem '#{arg}'"
  end

  gems << arg

  if name.nil?
    name = arg
    version = Regexp.last_match[1]
  end
end

if name.nil?
  abort 'Usage: brew gem [--option] <name> [dependency ...])'
end

klass = 'Ruby' + name.scan(/[A-Za-z0-9]+/).map(&:capitalize).join

require 'erb'
template = ERB.new(DATA.read, nil, '-')

require 'tempfile'
formula = File.join Dir.tmpdir, "ruby-#{name}.rb"

begin
  open(formula, 'w') do |f|
    f.puts template.result(binding)
  end

  system 'brew', 'install', '--env=std', *options, formula
ensure
  File.unlink formula
end

__END__
require 'formula'

class NopDownloadStrategy < AbstractDownloadStrategy
  def fetch; Pathname.new ''; end
  def stage; Pathname.new ''; end
  def cached_location; Pathname.new ''; end
end

class BundlerInstalled < Requirement
  fatal true

  satisfy do
    which 'bundle'
  end

  def message; <<-EOS.undent
    Bundler is required to install.

    You can install it with:
      gem install bundler

    You can read more about Bundler at:
      http://bundler.io
    EOS
  end
end

class <%= klass %> < Formula
  url 'http://rubygems.org/downloads/<%= name %>-<%= version %>.gem', :using => NopDownloadStrategy
  homepage 'http://rubygems.org/gems/<%= name %>'

  depends_on BundlerInstalled

  def install
    Dir.chdir prefix

    open('Gemfile', 'w') do |f|
      f.puts "source 'https://rubygems.org'"
      <%- gems.each do |g| -%>
      f.puts "gem '<%= g %>'"
      <%- end -%>
    end

    system 'bundle', 'install', "--path=#{libexec + '<%= name %>'}", '--binstubs'

    bin_entries = Dir.new(bin).entries
    gem_bin = File.join(`bundle show <%= name %>`.strip, 'bin')
    gem_bin_entries = Dir.new(gem_bin).entries rescue []
    (bin_entries - gem_bin_entries).each do |f|
      next if f =~ /^\.{1,2}$/
      File.delete bin + f
    end
  end
end
